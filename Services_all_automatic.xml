<?xml version="1.0" encoding="UTF-8" ?>
<feed  version="1.0" hasPendingRequests="false" >
  <company></company>
  <status>200</status>
  <errmsg>OK</errmsg>
  <interval>0</interval>
    <entry type="predatasource">
        <version>1554760950</version>
        <name>Services_all_automatic</name>
        <displayedas>Services all automatic</displayedas>
        <description>Monitors all Windows services that are set to &#34;startup type = automatic&#34;. It&#39;s more efficient than default WMI DataSource because it&#39;s batchscript meaning it gets all info in one script instead of separate WMI calls for each service. By Mike Suding.</description>
        <collector>batchscript</collector>
        <hasMultiInstances>true</hasMultiInstances>
        <schedule>60</schedule>
        <appliesTo>isWindows()</appliesTo>
        <wildcardauto>true</wildcardauto>
        <wildcardpersist>false</wildcardpersist>
        <wildcardlinuxscript>ad_script</wildcardlinuxscript>
        <wildcardlinuxcmdline>type=&#34;powerShell&#34; </wildcardlinuxcmdline>
        <wildcardwinscript>ad_script</wildcardwinscript>
        <wildcardwincmdline>type=&#34;powerShell&#34; </wildcardwincmdline>
        <wildcardgroovyscript>#get-service
$HostName = &#39;##SYSTEM.SYSNAME##&#39;
$UserName = &#39;##wmi.user##&#39;
$Password = &#39;##wmi.pass##&#39;

$DiscoveryScriptBlock = 
{
    $Services = Get-WmiObject win32_service | Where-Object {$_.StartMode -eq &#34;Auto&#34;}
    Foreach ($service in $Services)
    {
        Write-Host &#34;$($service.Name)##$($service.DisplayName)&#34;
    }
}

Try
{
    #If creds empty - invoke remote command without creds, if not - create credential object and use it for authorization
    if ($UserName -Match &#34;wmi.user&#34; -and $Password -Match &#34;wmi.pass&#34;)
    {
        Invoke-Command -ComputerName $HostName -ScriptBlock $DiscoveryScriptBlock
    }
    else
    {
        $Credentials = New-Object System.Management.Automation.PSCredential ($UserName, $(ConvertTo-SecureString $Password -AsPlainText -Force))
        Invoke-Command -ComputerName $HostName -ScriptBlock $DiscoveryScriptBlock -Credential $Credentials
    }
}
Catch 
{
    #In case of error - create new instance with error description
    Write-Host &#34;ERROR##$($_.FullyQualifiedErrorId): $($_.Exception.Message)&#34;
}
Exit 0</wildcardgroovyscript>
        <wildcardschedule>15</wildcardschedule>
        <wildcarddisable>false</wildcarddisable>
        <wildcarddeleteinactive>false</wildcarddeleteinactive>
        <agdmethod>none</agdmethod>
        <agdparams></agdparams>
        <group></group>
        <tags></tags>
        <technology>You will need to filter out some services that automatically start but are not always running. Do this by adding to the discovery filter below.</technology>
        <adlist><![CDATA[{"agdmethod":"none","method":"ad_script","agdparams":"","id":0,"filters":[{"attribute":"##wildalias##","operation":"RegexNotMatch","value":"##services_to_ignore##"},{"attribute":"##wildalias##","operation":"RegexNotMatch","value":"gupdate|Software Protection|Remote Registry|Wireless Zero|Downloaded Maps|Windows Biometric|Framework NGEN"}],"params":{"type":"powerShell","groovyscript":"#get-service\r\n$HostName = '##SYSTEM.SYSNAME##'\r\n$UserName = '##wmi.user##'\r\n$Password = '##wmi.pass##'\r\n\r\n$DiscoveryScriptBlock = \r\n{\r\n    $Services = Get-WmiObject win32_service | Where-Object {$_.StartMode -eq \"Auto\"}\r\n    Foreach ($service in $Services)\r\n    {\r\n        Write-Host \"$($service.Name)##$($service.DisplayName)\"\r\n    }\r\n}\r\n\r\nTry\r\n{\r\n    #If creds empty - invoke remote command without creds, if not - create credential object and use it for authorization\r\n    if ($UserName -Match \"wmi.user\" -and $Password -Match \"wmi.pass\")\r\n    {\r\n        Invoke-Command -ComputerName $HostName -ScriptBlock $DiscoveryScriptBlock\r\n    }\r\n    else\r\n    {\r\n        $Credentials = New-Object System.Management.Automation.PSCredential ($UserName, $(ConvertTo-SecureString $Password -AsPlainText -Force))\r\n        Invoke-Command -ComputerName $HostName -ScriptBlock $DiscoveryScriptBlock -Credential $Credentials\r\n    }\r\n}\r\nCatch \r\n{\r\n    #In case of error - create new instance with error description\r\n    Write-Host \"ERROR##$($_.FullyQualifiedErrorId): $($_.Exception.Message)\"\r\n}\r\nExit 0"}}]]></adlist>
        <schemaVersion>2</schemaVersion>
        <dataSourceType>1</dataSourceType>
        <attributes>
        <attribute>
            <name>scripttype</name>
            <value>powerShell</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>scriptgroovy</name>
            <value>#Collection Script
$HostName = &#39;##SYSTEM.SYSNAME##&#39;
$UserName = &#39;##wmi.user##&#39;
$Password = &#39;##wmi.pass##&#39;

$CollectionScriptBlock = 
{
    $Services = Get-WmiObject win32_service | Where-Object {$_.StartMode -eq &#34;Auto&#34;}
    Foreach ($service in $Services)
    {
        if ($service.State -eq &#34;Running&#34;)
        {
            $running = 1
        }
        else
        {
            $running = 0
        }
        Write-Host &#34;$($service.Name).running=$running&#34;
    }

}

Try
{
    #If creds empty - invoke remote command without creds, if not - create credential object and use it for authorization
    if ($UserName -and $Password)
    {
        $Credentials = New-Object System.Management.Automation.PSCredential ($UserName, $(ConvertTo-SecureString $Password -AsPlainText -Force))
        Invoke-Command -ComputerName $HostName -ScriptBlock $CollectionScriptBlock -Credential $Credentials
    } 
    else 
    {
        Invoke-Command -ComputerName $HostName -ScriptBlock $CollectionScriptBlock
    }
}
Catch
{
    #In case of error - write -1 to Error instance
    Write-Host &#34;ERROR.running=-1&#34;
}
Exit 0</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>windowsscript</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>linuxscript</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>windowscmdline</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>linuxcmdline</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>__filter_0</name>
            <value>##wildalias##	RegexNotMatch	##services_to_ignore##</value>
            <comment>ignore these as listed in device property</comment>
        </attribute>
        <attribute>
            <name>__filter_1</name>
            <value>##wildalias##	RegexNotMatch	gupdate|Software Protection|Remote Registry|Wireless Zero|Downloaded Maps|Windows Biometric|Framework NGEN</value>
            <comment>add your services to skip here</comment>
        </attribute>
        </attributes>
        <datapoints>
        <datapoint>
            <name>running</name>
            <dataType>7</dataType>
            <type>2</type>
            <postprocessormethod>namevalue</postprocessormethod>
            <postprocessorparam>##wildvalue##.running</postprocessorparam>
            <usevalue>output</usevalue>
            <alertexpr>!= 1 timezone=America/Los_Angeles</alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <description>1 means it&#39;s running</description>
            <maxvalue></maxvalue>
            <minvalue></minvalue>
            <userparam1></userparam1>
            <userparam2></userparam2>
            <userparam3></userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        <datapoint>
            <name>milliseconds_it_took</name>
            <dataType>4</dataType>
            <type>2</type>
            <postprocessormethod>none</postprocessormethod>
            <postprocessorparam></postprocessorparam>
            <usevalue>responseTime</usevalue>
            <alertexpr>&#62; 9988 timezone=America/Los_Angeles</alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <description>to make sure it doesn&#39;t take too long</description>
            <maxvalue></maxvalue>
            <minvalue></minvalue>
            <userparam1></userparam1>
            <userparam2></userparam2>
            <userparam3></userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>4</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        </datapoints>
        <graphs>
        <graph>
            <name>milliseconds it took</name>
            <title>milliseconds it took</title>
            <verticallabel>ms</verticallabel>
            <rigid>false</rigid>
            <maxvalue>NaN</maxvalue>
            <minvalue>NaN</minvalue>
            <displayprio>2</displayprio>
            <timescale>1day</timescale>
            <base1024>false</base1024>
            <graphdatapoints>
        <graphdatapoint>
            <name>milliseconds_it_took</name>
            <datapointname>milliseconds_it_took</datapointname>
            <cf>1</cf>
        </graphdatapoint>
            </graphdatapoints>
            <graphvirtualdatapoints>
            </graphvirtualdatapoints>
            <graphdatas>
            <graphdata>
                <type>2</type>
                <legend>milliseconds_it_took</legend>
                <color>olive</color>
                <datapointname>milliseconds_it_took</datapointname>
                <isvirtualdatapoint>false</isvirtualdatapoint>
            </graphdata>
            </graphdatas>
        </graph>
        </graphs>
        <overviewgraphs>
        <overviewgraph>
            <name>milliseconds it took</name>
            <title>milliseconds it took</title>
            <verticallabel>ms</verticallabel>
            <rigid>false</rigid>
            <maxvalue>NaN</maxvalue>
            <minvalue>NaN</minvalue>
            <displayprio>1</displayprio>
            <timescale>8hour</timescale>
            <base1024>false</base1024>
            <aggregated>false</aggregated>
            <datapoints>
        <overviewgraphdatapoint>
            <name>milliseconds_it_took</name>
            <datapointname>milliseconds_it_took</datapointname>
            <cf>1</cf>
            <aggregateMethod>sum</aggregateMethod>
        </overviewgraphdatapoint>
            </datapoints>
            <virtualdatapoints>
            </virtualdatapoints>
            <lines>
            <overviewgraphline>
                <type>2</type>
                <legend>##INSTANCE##</legend>
                <datapointname>milliseconds_it_took</datapointname>
                <isvirtualdatapoint>false</isvirtualdatapoint>
                <color>silver</color>
            </overviewgraphline>
            </lines>
        </overviewgraph>
        </overviewgraphs>
        <scripts>
        </scripts>
    </entry>
</feed>
